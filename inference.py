# Adapted from https://github.com/lmnt-com/wavegrad under the Apache-2.0 license.

# Copyright 2020 LMNT, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

import numpy as np
import os
import torch
import torchaudio

from argparse import ArgumentParser

from params import AttrDict, params as base_params
from model import SpecGrad
from utils import istft_M_stft
from preprocess import get_spec_filter
from torch.nn.functional import normalize

models = {}

def predict(spectrogram, M, model_dir=None, params=None, device=torch.device('cuda')):
  # Lazy load model.
  if not model_dir in models:
    if os.path.exists(f'{model_dir}/weights.pt'):
      checkpoint = torch.load(f'{model_dir}/weights.pt')
    else:
      checkpoint = torch.load(model_dir)
    model = SpecGrad(AttrDict(base_params)).to(device)
    model.load_state_dict(checkpoint['model'])
    model.eval()
    models[model_dir] = model

  model = models[model_dir]
  model.params.override(params)
  with torch.no_grad():
    beta = np.array(model.params.inference_noise_schedule)
    alpha = 1 - beta
    alpha_cum = np.cumprod(alpha)

    # Expand rank 2 tensors by adding a batch dimension.
    if len(spectrogram.shape) == 2:
      spectrogram = spectrogram.unsqueeze(0)
    spectrogram = spectrogram.to(device)

    # Expand rank 2 tensors by adding a batch dimension.
    if len(M.shape) == 2:
      M = M.unsqueeze(0)
    M = M.to(device)
    audio = torch.randn(spectrogram.shape[0], model.params.hop_samples * spectrogram.shape[-1], device=device)
    audio = istft_M_stft(audio, M)
    noise_scale = torch.from_numpy(alpha_cum**0.5).float().unsqueeze(1).to(device)

    for n in range(len(alpha) - 1, -1, -1):
      c1 = 1 / alpha[n]**0.5
      c2 = (1 - alpha[n]) / (1 - alpha_cum[n])**0.5
      audio = c1 * (audio - c2 * model(audio, spectrogram, noise_scale[n]).squeeze(1))
      if n > 0:
        noise = torch.randn_like(audio)
        noise = istft_M_stft(noise, M)
        sigma = ((1.0 - alpha_cum[n-1]) / (1.0 - alpha_cum[n]) * beta[n])**0.5
        audio += sigma * noise
    audio = torch.clamp(audio, -1.0, 1.0)
  return audio, model.params.sample_rate


def main(args):
  params = {}
  if args.noise_schedule:
    params['inference_noise_schedule'] = torch.from_numpy(np.load(args.noise_schedule))
  if args.spectrogram_path:
    spectrogram = torch.from_numpy(np.load(args.spectrogram_path))
    M = torch.from_numpy(np.load(args.filter_path))
    if args.audio_path:
      print("The spectrogram file will be used to generate the audio.")
  elif args.audio_path:
    gt_audio, _ = torchaudio.load(args.audio_path)
    gt_audio = normalize(gt_audio, p=float('inf'), dim=-1, eps=1e-12) * 0.95
    spectrogram, M = get_spec_filter(gt_audio, AttrDict(base_params))
  else:
    raise Exception("You should provide a path to either a spectrogram file or an audio file.")
  audio, sr = predict(spectrogram, M, model_dir=args.model_dir, params=params)
  torchaudio.save(args.output, audio.cpu(), sample_rate=sr)


if __name__ == '__main__':
  parser = ArgumentParser(description='runs inference on a spectrogram file generated by specgrad.preprocess')
  parser.add_argument('--model_dir',
      help='directory containing a trained model (or full path to weights.pt file)')
  parser.add_argument('--spectrogram_path', default=None,
      help='path to a spectrogram file generated by specgrad.preprocess')
  parser.add_argument('--audio_path', default=None,
      help='path to an audio file')
  parser.add_argument('--noise-schedule', '-n', default=None,
      help='path to a custom noise schedule file generated by specgrad.noise_schedule')
  parser.add_argument('--output', '-o', default='output.wav',
      help='output file name')
  main(parser.parse_args())
